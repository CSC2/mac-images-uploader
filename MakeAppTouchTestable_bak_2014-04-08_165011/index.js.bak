
Ti.API.info("here0");

/*
 * This scripts expects a csv file to be placed in the Resources dir.  It will read columns as dicatated by the code below.
 * Then it will update the values of each project in ACS.
 */

var Cloud = require('ti.cloud');

var user = "csc";
var password = "1234";
var dirName = "upload";

function updateProject(projectid, fields, tags) {
	Cloud.Objects.update({
		classname : 'projects',
		id : projectid,
		//tags : tags,
		fields : fields
	}, function(e) {
		if (e.success) {
			var project = e.projects[0];
			Ti.API.info('Success:\n' + 'id: ' + project.id + '\n' + 'updated_at: ' + project.updated_at);
		} else {
			Ti.API.info('Error:\n' + ((e.error && e.message) || JSON.stringify(e)));
		}
	});
}

function displayDialog(projectId, fields, tags) {
	Ti.UI.setBackgroundColor('white');
	var dialogMsg = "Update project:" + projectId + " with tags:" + JSON.stringify(tags) + " and fields: " + JSON.stringify(fields);
	var dialog = Ti.UI.createAlertDialog({
		cancel : 1,
		buttonNames : ['Confirm', "Cancel"],
		message : dialogMsg,
		title : 'Confirm Update'
	});
	dialog.addEventListener('click', function(e) {
		var indexClick = e.index;
		if (indexClick === e.source.cancel) {
			Ti.API.info('The cancel button was clicked');
		} else if (indexClick === 0) {
			updateProject(projectId, fields, tags);
		}
	});
	dialog.show();
}

function isEmpty(map) {
	for (var key in map) {
		if (map.hasOwnProperty(key)) {
			return false;
		}
	}
	return true;
}

function readUploadDir(projectIds) {
	var uploadDir = Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory, dirName);

	if (!uploadDir.exists()) {
		alert("did not find directory " + dirName);
	} else {
		var files = uploadDir.getDirectoryListing();

		for (var i = 0; i < files.length; i++) {
			var file = files[i];
			Ti.API.info(JSON.stringify(file));
			if (file.isDirectory()) {
				Ti.API.info("directory");

				var fileNameLen = file.length;
				var underIndex = file.indexOf("_");
				var projId = file.substring(0, underIndex);
				var projName = file.substring(underIndex, fileNameLen);

				Ti.API.info("projId " + projId);
				Ti.API.info("projName " + projName);
				for (var j = 0; j < projectIds.length; j++) {
					var projectId = projectIds[j];
				}
			}
		}
	}
}

function doClick(e) {
	function getProjectsCallback(projectsCallback) {
		if (projectsCallback.success) {
			var photos = [];
			var projectIds = [];
			for (var i = 0; i < projectsCallback.projects.length; i++) {
				var project = projectsCallback.projects[i];
				var projectId = project.id;
				projectIds.push(projectId);
			}
			readUploadDir(projectIds);
		}
	}

	function loginCallBack(logincallback) {
		if (logincallback.success) {
			getProjects(getProjectsCallback);
		} else {
			alert('It seems your password is outdated in ACS, please send an email to pbryzek@csc.com.');
		}
	}

	loginUser(user, password, loginCallBack);
}

function getProjects(callback) {
	Cloud.Objects.query({
		classname : 'projects'
	}, function(e) {
		callback(e);
	});
}

function loginUser(user, password, callback) {
	Cloud.Users.login({
		login : user,
		password : password
	}, function(e) {
		callback(e);
	});
}

Ti.API.info("here");
$.index.open();
Ti.API.info("here2");
